// _fonts.scss
@font-face {
    font-family: 'CodeFont';
    src: url('../font/code/CodeFontLight.eot');
    src: url('../font/code/CodeFontLight.eot?#iefix') format('embedded-opentype'),
       url('../font/code/CodeFontLight.woff2') format('woff2'),
       url('../font/code/CodeFontLight.woff') format('woff'),
       url('../font/code/CodeFontLight.ttf') format('truetype'),
       url('../font/code/CodeFontLight.svg#Code-Pro-Light-LC') format('svg');
    font-style: normal;
    font-weight: 100;
}

@font-face {
    font-family: 'CodeFont';
    src: url('../font/code/CodeFontRegular.eot');
    src: url('../font/code/CodeFontRegular.eot?#iefix') format('embedded-opentype'),
       url('../font/code/CodeFontRegular.woff2') format('woff2'),
       url('../font/code/CodeFontRegular.woff') format('woff'),
       url('../font/code/CodeFontRegular.ttf') format('truetype'),
       url('../font/code/CodeFontRegular.svg#Code-Pro-LC') format('svg');
    font-style: normal;
    font-weight: 300;
}

@font-face {
    font-family: 'Geo';
    src: url('../font/geo/GeoBook.eot');
    src: url('../font/geo/GeoBook.eot?#iefix') format('embedded-opentype'),
       url('../font/geo/GeoBook.woff2') format('woff2'),
       url('../font/geo/GeoBook.woff') format('woff'),
       url('../font/geo/GeoBook.ttf') format('truetype'),
       url('../font/geo/GeoBook.svg#GeoBook') format('svg');
    font-style: normal;
    font-weight: 500;
}

@font-face {
    font-family: 'Geo';
    src: url('../font/geo/GeoLight.eot');
    src: url('../font/geo/GeoLight.eot?#iefix') format('embedded-opentype'),
       url('../font/geo/GeoLight.woff2') format('woff2'),
       url('../font/geo/GeoLight.woff') format('woff'),
       url('../font/geo/GeoLight.ttf') format('truetype'),
       url('../font/geo/GeoLight.svg#GeoLight') format('svg');
    font-style: normal;
    font-weight: 300;
}

@font-face {
    font-family: 'Geo';
    src: url('../font/geo/GeoThin.eot');
    src: url('../font/geo/GeoThin.eot?#iefix') format('embedded-opentype'),
       url('../font/geo/GeoThin.woff2') format('woff2'),
       url('../font/geo/GeoThin.woff') format('woff'),
       url('../font/geo/GeoThin.ttf') format('truetype'),
       url('../font/geo/GeoThin.svg#GeoThin') format('svg');
    font-style: normal;
    font-weight: 100;
}


// Responsive Typography
$rwd-typography: (
    default: (
        base-font-size: 16px,
        vertical-rhythm: 1.414,
        type-scale: 1.3,
        min-width: null
    ),
    medium: (
        base-font-size: 18px,
        vertical-rhythm: 1.5,
        type-scale: 1.414,
        min-width: 480px
    ),
    large: (
        base-font-size: 20px,
        vertical-rhythm: 1.618,
        type-scale: 1.5,
        min-width: 960px
    ),
    xlarge: (
        base-font-size: 24px,
        vertical-rhythm: 1.618,
        type-scale: 1.618,
        min-width: 1300px
    )
);

$rwd-scale-labels: (p, bq, sh, h, hero);

@function rwd-generate-font-size ($label, $breakpoint) {
    $label-position: index($rwd-scale-labels, $label);
    $breakpoint-base-font-size: map-get(map-get($rwd-typography, $breakpoint), base-font-size);
    $breakpoint-type-scale: map-get(map-get($rwd-typography, $breakpoint), type-scale);
    $breakpoint-vertical-rhythm: map-get(map-get($rwd-typography, $breakpoint), vertical-rhythm);
    $font-size: $breakpoint-base-font-size;
    @for $i from 1 to $label-position {
        $font-size: $font-size * $breakpoint-type-scale;
    }
    $base-vertical-rhythm: $breakpoint-base-font-size * $breakpoint-vertical-rhythm;
    $line-height: round($font-size / $base-vertical-rhythm) * $base-vertical-rhythm / $font-size;
    $return: join($font-size, $line-height);
    @return $return;
}

@each $label in $rwd-scale-labels {
    %#{$label} {
        @each $breakpoint, $data in $rwd-typography {
            $generated-values: rwd-generate-font-size($label, $breakpoint);
            $font-size: round(nth($generated-values, 1)*10)/10;
            $line-height: round(nth($generated-values, 2)*100)/100;
            
            @if map-get($data, min-width) != null {
                @media screen and (min-width: map-get($data, min-width)) {
                    font-size: $font-size;
                    line-height: $line-height;
                }    
            } @else {
                font-size: $font-size;
                line-height: $font-size;
            }
        }
    }
}

// Usage (p, bq, sh, h, hero)
/*
.hero-title {
    @extend %hero;
}

.body {
    @extend %p;
}
*/
